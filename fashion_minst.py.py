# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IW1ZhuWx2iOlUJlVSdh5oZbDr9O8bKOf
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.datasets import fashion_mnist
import matplotlib.pyplot as plt

(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()

x_train, x_test = x_train / 255.0, x_test / 255.0
x_train = x_train.reshape(-1, 28, 28, 1)
x_test = x_test.reshape(-1, 28, 28, 1)
model = models.Sequential([
    layers.Input(shape=(28, 28, 1)),
    layers.Conv2D(32, (3, 3), activation="relu"),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation="relu"),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(128, activation="relu"),
    layers.Dropout(0.5),
    layers.Dense(10, activation="softmax")
])

model.compile(optimizer="adam",
              loss="sparse_categorical_crossentropy",
              metrics=["accuracy"])


history = model.fit(x_train, y_train, epochs=10, validation_split=0.2)

test_loss, test_acc = model.evaluate(x_test, y_test)
print(f"\n Test accuracy: {test_acc:.4f}")
model.save("fashion_mnist_model.h5")
print(" Model saved as fashion_mnist_model.h5")
plt.figure(figsize=(14, 6))
plt.subplot(1, 2, 1)
plt.plot(history.history["accuracy"], label="Training Accuracy", linewidth=2, marker='o')
plt.plot(history.history["val_accuracy"], label="Validation Accuracy", linewidth=2, marker='s')
plt.title("Model Accuracy", fontsize=16)
plt.xlabel("Epoch", fontsize=14)
plt.ylabel("Accuracy", fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.legend(fontsize=12)
plt.grid(True, linestyle="--", alpha=0.6)
plt.subplot(1, 2, 2)
plt.plot(history.history["loss"], label="Training Loss", linewidth=2, marker='o')
plt.plot(history.history["val_loss"], label="Validation Loss", linewidth=2, marker='s')
plt.title("Model Loss", fontsize=16)
plt.xlabel("Epoch", fontsize=14)
plt.ylabel("Loss", fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.legend(fontsize=12)
plt.grid(True, linestyle="--", alpha=0.6)

plt.tight_layout()
plt.show()

pip install streamlit

import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
from tensorflow.keras.models import load_model

model = load_model("fashion_mnist_model.h5")
y_pred = model.predict(x_test)
y_pred_classes = y_pred.argmax(axis=1)


class_names = [
    "T-shirt/top", "Trouser", "Pullover", "Dress", "Coat",
    "Sandal", "Shirt", "Sneaker", "Bag", "Ankle boot"]

plt.figure(figsize=(12,12), dpi=150)
for i in range(12):
    img = Image.fromarray((x_test[i].reshape(28, 28) * 255).astype('uint8'))
    img = img.resize((224, 224), Image.NEAREST)

    plt.subplot(3, 4, i+1)
    plt.imshow(img, cmap="gray", interpolation="none")

    pred_label = class_names[y_pred_classes[i]]
    true_label = class_names[y_test[i]]
    color = "green" if pred_label == true_label else "red"
    plt.title(f"Pred: {pred_label}\nTrue: {true_label}", fontsize=14, color=color)
    plt.axis("off")

plt.tight_layout()
plt.show()

st.set_page_config(page_title="Fashion MNIST Classifier", layout="centered")
st.title(" Fashion MNIST Image Classifier")
st.write("Upload a **28x28 grayscale clothing image**, and the model will predict the category.")


uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file).convert("L").resize((28, 28))
    st.image(image, caption="Uploaded & Resized Image (28x28)", width=150)

    img_array = np.array(image) / 255.0
    img_array = img_array.reshape(1, 28, 28, 1)


    prediction = model.predict(img_array)
    predicted_class = class_names[np.argmax(prediction)]
    confidence = 100 * np.max(prediction)


    st.success(f" This looks like a **{predicted_class}** "
               f"with **{confidence:.2f}%** confidence.")
    fig, ax = plt.subplots(figsize=(8, 4))
    ax.bar(class_names, prediction[0], color="skyblue")
    ax.set_ylabel("Probability")
    ax.set_xlabel("Fashion Category")
    ax.set_title("Prediction Probabilities")
    plt.xticks(rotation=45)
    st.pyplot(fig)

from google.colab import files
files.download("fashion_mnist_model.h5")
